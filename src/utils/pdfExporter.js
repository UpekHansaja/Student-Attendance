import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

// Test if jsPDF is working
console.log('jsPDF imported:', jsPDF);
console.log('autoTable imported:', autoTable);

// PDF export utility for attendance data
export const exportAttendanceToPDF = (attendanceData, studentsData, exportType = 'today') => {
  try {
    console.log('Starting PDF export...', { attendanceData, studentsData, exportType });
    
    const doc = new jsPDF();
    const today = new Date();
    const currentDate = today.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    const currentTime = today.toLocaleTimeString();

  // Calculate statistics
  const totalRecords = attendanceData.length;
  const studentsIn = attendanceData.filter(record => record.inTime).length;
  const studentsOut = attendanceData.filter(record => record.outTime).length;
  const completedAttendance = attendanceData.filter(record => record.inTime && record.outTime).length;

  // Add header
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('Student Attendance Report', 20, 30);

  // Add institution info
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text('Java Institute - Gampaha', 20, 40);
  doc.text(`Generated on: ${currentDate} at ${currentTime}`, 20, 50);

  // Add statistics box
  doc.setFillColor(240, 248, 255);
  doc.rect(20, 60, 170, 35, 'F');
  
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Attendance Summary', 25, 75);

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Total Records: ${totalRecords}`, 25, 85);
  doc.text(`Students IN: ${studentsIn}`, 25, 92);
  doc.text(`Students OUT: ${studentsOut}`, 100, 85);
  doc.text(`Completed: ${completedAttendance}`, 100, 92);

  // Prepare table data
  const tableData = attendanceData.map(record => {
    const student = studentsData.find(s => s.nic === record.nic);
    const status = record.outTime ? 'Completed' : record.inTime ? 'Present' : 'Absent';
    
    return [
      student?.fullName || 'Unknown Student',
      record.nic,
      record.inTime || '-',
      record.outTime || '-',
      status
    ];
  });

  // Add table
  autoTable(doc, {
    startY: 110,
    head: [['Student Name', 'NIC Number', 'IN Time', 'OUT Time', 'Status']],
    body: tableData,
    styles: {
      fontSize: 9,
      cellPadding: 3,
    },
    headStyles: {
      fillColor: [14, 165, 233], // primary-500
      textColor: 255,
      fontStyle: 'bold',
    },
    alternateRowStyles: {
      fillColor: [248, 250, 252], // gray-50
    },
    columnStyles: {
      0: { cellWidth: 50 }, // Student Name
      1: { cellWidth: 35 }, // NIC
      2: { cellWidth: 25 }, // IN Time
      3: { cellWidth: 25 }, // OUT Time
      4: { cellWidth: 25 }, // Status
    },
    margin: { left: 20, right: 20 },
  });

  // Add footer
  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text(
      `Page ${i} of ${pageCount} | Generated by Student Attendance System`,
      20,
      doc.internal.pageSize.height - 10
    );
  }

    // Generate filename
    const dateStr = today.toISOString().split('T')[0];
    const filename = exportType === 'today' 
      ? `attendance_${dateStr}.pdf`
      : `attendance_all_${dateStr}.pdf`;

    console.log('Saving PDF with filename:', filename);

    // Save the PDF
    doc.save(filename);
    
    console.log('PDF saved successfully');
    return true;
  } catch (error) {
    console.error('Error generating PDF:', error);
    return false;
  }
};

// Basic PDF export for testing (no table)
export const exportBasicPDF = () => {
  try {
    console.log('Creating basic PDF...');
    const doc = new jsPDF();
    
    // Add title
    doc.setFontSize(20);
    doc.text('Student Attendance Report', 20, 30);
    
    // Add date
    doc.setFontSize(12);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 50);
    
    // Add some text
    doc.text('This is a test PDF export.', 20, 70);
    doc.text('If you can see this, jsPDF is working!', 20, 80);
    
    // Save PDF
    doc.save('test_attendance.pdf');
    console.log('Basic PDF created successfully');
    return true;
  } catch (error) {
    console.error('Error creating basic PDF:', error);
    return false;
  }
};

// Professional PDF export with proper formatting
export const exportSimplePDF = (data, studentsData) => {
  try {
    console.log('Creating professional PDF...');
    const doc = new jsPDF();
    const today = new Date();
    
    // Header styling
    doc.setFillColor(14, 165, 233); // Primary blue
    doc.rect(0, 0, 210, 40, 'F');
    
    // Title
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(24);
    doc.setFont('helvetica', 'bold');
    doc.text('Student Attendance Report', 20, 25);
    
    // Institution
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text('Java Institute - Gampaha', 20, 35);
    
    // Reset text color
    doc.setTextColor(0, 0, 0);
    
    // Today's date
    const currentDate = today.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    const currentTime = today.toLocaleTimeString();
    
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text(`Date: ${currentDate}`, 20, 55);
    
    // Statistics box
    doc.setFillColor(240, 248, 255);
    doc.rect(20, 65, 170, 25, 'F');
    
    const totalStudents = data.length;
    const studentsIn = data.filter(record => record.inTime).length;
    const studentsOut = data.filter(record => record.outTime).length;
    const completedAttendance = data.filter(record => record.inTime && record.outTime).length;
    
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Attendance Summary', 25, 75);
    
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(`Total Students Attended: ${totalStudents}`, 25, 82);
    doc.text(`Students IN: ${studentsIn}`, 25, 87);
    doc.text(`Students OUT: ${studentsOut}`, 100, 82);
    doc.text(`Completed: ${completedAttendance}`, 100, 87);
    
    // Prepare table data with numbering
    const tableData = data.map((record, index) => {
      const student = studentsData.find(s => s.nic === record.nic);
      const status = record.outTime ? 'Completed' : record.inTime ? 'Present' : 'Absent';
      
      return [
        (index + 1).toString(), // # column
        student?.fullName || 'Unknown Student',
        record.nic,
        record.inTime || '-',
        record.outTime || '-',
        status
      ];
    });
    
    // Add table
    autoTable(doc, {
      startY: 100,
      head: [['#', 'Student Name', 'NIC Number', 'IN Time', 'OUT Time', 'Status']],
      body: tableData,
      styles: {
        fontSize: 9,
        cellPadding: 4,
        halign: 'center',
      },
      headStyles: {
        fillColor: [14, 165, 233], // Primary blue
        textColor: 255,
        fontStyle: 'bold',
        halign: 'center',
      },
      alternateRowStyles: {
        fillColor: [248, 250, 252], // Light gray
      },
      columnStyles: {
        0: { cellWidth: 15, halign: 'center' }, // # column
        1: { cellWidth: 45, halign: 'left' },   // Student Name
        2: { cellWidth: 35, halign: 'center' }, // NIC
        3: { cellWidth: 25, halign: 'center' }, // IN Time
        4: { cellWidth: 25, halign: 'center' }, // OUT Time
        5: { cellWidth: 25, halign: 'center' }, // Status
      },
      margin: { left: 20, right: 20 },
    });
    
    // Add footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(100, 100, 100);
      doc.text(
        `Page ${i} of ${pageCount} | Generated on ${currentDate} at ${currentTime}`,
        20,
        doc.internal.pageSize.height - 10
      );
    }
    
    // Generate filename
    const dateStr = today.toISOString().split('T')[0];
    const filename = `attendance_${dateStr}.pdf`;
    
    // Save PDF
    doc.save(filename);
    console.log('Professional PDF created successfully');
    return true;
  } catch (error) {
    console.error('Error creating professional PDF:', error);
    return false;
  }
};

// Export today's attendance to PDF
export const exportTodaysAttendancePDF = (todaysData, studentsData) => {
  // Use simple PDF for now
  return exportSimplePDF(todaysData, studentsData);
};

// Export all attendance to PDF
export const exportAllAttendancePDF = (allData, studentsData) => {
  // Use simple PDF for now
  return exportSimplePDF(allData, studentsData);
};
